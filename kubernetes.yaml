jenkins:
  systemMessage: "本环境是由 Jenkins 中文社区工作坊提供，更多活动请访问 https://jenkins-zh.cn/event/。推荐使用 Jenkins 的客户端工具 https://github.com/LinuxSuRen/jenkins-cli 管理\
    你的 Jenkins。练习时，每个人以自己的名字创建对应的文件夹，并在里面进行操作。"
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  disableRememberMe: false
  labelString: master
  mode: NORMAL
  numExecutors: 0
  primaryView:
    all:
      name: "all"
  quietPeriod: 5
  scmCheckoutRetryCount: 0
  slaveAgentPort: 50000
  views:
  - all:
      name: "all"
  clouds:
  - kubernetes:
      name: kubernetes
      credentialsId: "c6369e96-009b-44fe-9090-c65eb6030334"
      jenkinsTunnel: jenkins.jd.surenpi.com:50000
      jenkinsUrl: http://jenkins.jd.surenpi.com:12345
      maxRequestsPerHostStr: "32"
      namespace: default
      serverUrl: https://117.48.228.41:6443
      podRetention: never
      containerCapStr: ""
      skipTlsVerify: true
      templates:
      - name: java
        label: java
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        containers:
        - name: java
          args: cat
          command: /bin/sh -c
          image: docker.io/openjdk
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
      - name: maven
        label: maven-3.6 java8 maven
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        containers:
        - name: maven
          args: cat
          command: /bin/sh -c
          image: docker.io/maven:3.6-jdk-8
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
      - name: docker-maven
        label: docker maven maven-3.6
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        volumes:
          - hostPathVolume:
              mountPath: "/var/run/docker.sock"
              hostPath: "/var/run/docker.sock"
        containers:
        - name: maven
          args: cat
          command: /bin/sh -c
          image: docker.io/maven:3.6-jdk-8
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        - name: docker
          args: cat
          command: /bin/sh -c
          image: docker.io/docker
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
      - name: docker
        label: docker
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        volumes:
          - hostPathVolume:
              mountPath: "/var/run/docker.sock"
              hostPath: "/var/run/docker.sock"
        containers:
        - name: docker
          args: cat
          command: /bin/sh -c
          image: docker.io/docker
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
      - name: helm
        label: helm
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        containers:
        - name: java
          args: cat
          command: /bin/sh -c
          image: alpine/helm
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
      - name: golang
        label: golang
        containers:
        - name: golang
          args: cat
          command: /bin/sh -c
          image: docker.io/golang
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 1500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        workspaceVolume:
          emptyDirWorkspaceVolume:
            memory: false
      - name: golang-docker
        label: golang docker
        volumes:
          - hostPathVolume:
              mountPath: "/var/run/docker.sock"
              hostPath: "/var/run/docker.sock"
        containers:
        - name: golang
          args: cat
          command: /bin/sh -c
          image: docker.io/golang
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 1500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        - name: docker
          args: cat
          command: /bin/sh -c
          image: docker.io/docker
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 2500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        workspaceVolume:
          emptyDirWorkspaceVolume:
            memory: false
      - name: kubectl
        label: kubectl
        containers:
        - name: kubectl
          args: cat
          command: /bin/sh -c
          image: bitnami/kubectl
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 1500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        workspaceVolume:
          emptyDirWorkspaceVolume:
            memory: false
      - name: jmeter
        label: jmeter
        containers:
        - name: jmeter
          args: cat
          command: /bin/sh -c
          image: egaillardon/jmeter
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          alwaysPullImage: false
          resourceLimitCpu: 1
          resourceLimitMemory: 1500M
          resourceRequestCpu: 500m
          resourceRequestMemory: 750M
          privileged: false
          ttyEnabled: true
        podRetention: never
        nodeUsageMode: NORMAL
        instanceCapStr: "5"
        workspaceVolume:
          emptyDirWorkspaceVolume:
            memory: false
